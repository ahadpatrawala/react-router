{"version":3,"sources":["Nav.js","About.js","Shop.js","ItemDetail.js","App.js","serviceWorker.js","index.js"],"names":["Nav","className","style","color","to","About","Shop","useEffect","fetchItems","fortniteAPI","FortNiteApi","useState","items","setItems","a","listItems","data","console","log","backpack","map","item","key","id","name","ItemDetails","match","fetchItem","images","styles","setItem","getItemDetails","params","src","icon","description","price","rarity","Home","App","path","exact","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"0NAqBeA,MAhBf,WACE,OACC,6BACI,oCACA,wBAAIC,UAAU,aACV,kBAAC,IAAD,CAAMC,MAAO,CAACC,MAAM,SAAUC,GAAG,UACjC,sCAEA,kBAAC,IAAD,CAAMF,MAAO,CAACC,MAAM,SAAUC,GAAG,SACjC,wCCHIC,MARf,WACE,OACE,yBAAKJ,UAAU,SACX,uC,iDC0BOK,MA3Bf,WAEIC,qBAAU,WACNC,MACF,IAEF,IAAMC,EAAc,IAAIC,IAAJ,uCANR,EAOaC,mBAAS,IAPtB,mBAOLC,EAPK,KAOCC,EAPD,KASVL,EAAU,uCAAG,8BAAAM,EAAA,sEACIL,EAAYM,YADhB,cACTC,EADS,gBAEKA,EAFL,OAETJ,EAFS,OAGfK,QAAQC,IAAIN,EAAMA,MAAMO,UACxBN,EAASD,EAAMA,MAAMO,UAJN,2CAAH,qDAOd,OACE,6BACKP,EAAMQ,KAAI,SAAAC,GAAI,OACX,wBAAIC,IAAKD,EAAKE,IACV,kBAAC,IAAD,CAAMnB,GAAE,gBAAWiB,EAAKE,KAAOF,EAAKG,YCarCC,MAjCf,YAAgC,IAATC,EAAQ,EAARA,MAEnBnB,qBAAU,WACNoB,MACF,IAEF,IAAMlB,EAAc,IAAIC,IAAJ,uCANO,EAOJC,mBACnB,CACIiB,OAAO,GACPC,OAAO,KAVY,mBAOpBR,EAPoB,KAOfS,EAPe,KAerBH,EAAS,uCAAG,8BAAAb,EAAA,sEACUL,EAAYsB,eAAeL,EAAMM,OAAOT,IADlD,cACRI,EADQ,gBAEIA,EAFJ,OAERN,EAFQ,OAGdS,EAAQT,EAAKA,MACbJ,QAAQC,IAAIG,EAAKA,MAJH,2CAAH,qDAOjB,OACE,6BACG,4BAAKA,EAAKG,MACT,yBAAKS,IAAKZ,EAAKO,OAAOM,OACvB,2BAAG,gDAAH,IAAkCb,EAAKc,aAAgB,6BACvD,2BAAG,0CAAH,IAA4Bd,EAAKe,OAAU,6BAC3C,2BAAG,2CAAH,IAA6Bf,EAAKgB,U,OCJzC,IAAMC,EAAQ,kBACZ,6BACE,2CAIWC,EAtBf,WACE,OACE,kBAAC,IAAD,KACA,yBAAKtC,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,IAAD,KACA,kBAAC,IAAD,CAAOuC,KAAK,IAAIC,OAAK,EAACC,UAAWJ,IADjC,2CAEA,kBAAC,IAAD,CAAOE,KAAK,SAASE,UAAWrC,IAChC,kBAAC,IAAD,CAAOmC,KAAK,QAAQC,OAAK,EAACC,UAAWpC,IACrC,kBAAC,IAAD,CAAOkC,KAAK,YAAYE,UAAWjB,QCVrBkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASpB,MACvB,2DCZNqB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1C,QAAQ0C,MAAMA,EAAMC,a","file":"static/js/main.0f4cabd7.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\nimport {Link} from 'react-router-dom';\r\n\r\n\r\nfunction Nav() {\r\n  return (\r\n   <nav>\r\n       <h3>Logo</h3>\r\n       <ul className='nav-links'>\r\n           <Link style={{color:'white'}} to='/about'>\r\n           <li>About</li>\r\n           </Link>\r\n           <Link style={{color:'white'}} to='/shop'>\r\n           <li>Shop</li>\r\n           </Link>\r\n       </ul>\r\n   </nav>\r\n  );\r\n}\r\n\r\nexport default Nav;\r\n","import React from 'react';\r\nimport './App.css';\r\n\r\nfunction About() {\r\n  return (\r\n    <div className=\"About\">\r\n        <h1>About</h1>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default About;\r\n","import React, { useEffect, useState } from 'react';\r\nimport './App.css';\r\nimport FortNiteApi from 'fortnite-api-io';\r\nimport {Link} from 'react-router-dom';\r\n\r\nfunction Shop() {\r\n\r\n    useEffect(() =>{\r\n        fetchItems();\r\n    },[]);\r\n\r\n    const fortniteAPI = new FortNiteApi(`fa4b6a76-8e54f022-47fe33bb-bc5e95f2`);\r\n    const [items,setItems] = useState([]);\r\n\r\nconst fetchItems = async () => {\r\n    const data = await fortniteAPI.listItems();\r\n    const items = await data;\r\n    console.log(items.items.backpack);\r\n    setItems(items.items.backpack);\r\n};\r\n\r\n  return (\r\n    <div>\r\n        {items.map(item => (\r\n            <h1 key={item.id}>\r\n                <Link to={`/shop/${item.id}`}>{item.name}</Link>\r\n                </h1> \r\n        ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Shop;","import React, { useEffect, useState } from 'react';\r\nimport './App.css';\r\nimport FortNiteApi from 'fortnite-api-io';\r\nimport {Link} from 'react-router-dom';\r\n\r\nfunction ItemDetails( {match}) {\r\n\r\n    useEffect(() =>{\r\n        fetchItem();\r\n    },[]);\r\n\r\n    const fortniteAPI = new FortNiteApi(`fa4b6a76-8e54f022-47fe33bb-bc5e95f2`);\r\n    const [item,setItem] = useState(\r\n        {\r\n            images:{},\r\n            styles:[]\r\n        }\r\n        );\r\n\r\n    \r\n    const fetchItem = async () =>{\r\n        const fetchItem = await fortniteAPI.getItemDetails(match.params.id);\r\n        const item =await fetchItem;\r\n        setItem(item.item)\r\n        console.log(item.item)\r\n    }\r\n\r\n  return (\r\n    <div>\r\n       <h1>{item.name}</h1>\r\n        <img src={item.images.icon}/>\r\n       <p><strong>Description:</strong> {item.description}</p><br/>\r\n       <p><strong>Price:</strong> {item.price}</p><br/>\r\n       <p><strong>Rarity:</strong> {item.rarity}</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ItemDetails;","import React from 'react';\nimport './App.css';\nimport Nav from './Nav'\nimport About from './About'\nimport Shop from './Shop'\nimport ItemDetails from './ItemDetail'\nimport {BrowserRouter as Router, Switch, Route} from 'react-router-dom';\n\n//To add the ability to handle routing in React -> BrowserRouter\n//Route renders component based on the url\n//Switch stops rendering all components and renders only a single component... eg. Rendering Home with About\n\n\nfunction App() {\n  return (\n    <Router>\n    <div className=\"App\">\n      <Nav/>\n      <Switch>\n      <Route path=\"/\" exact component={Home}/> // exact-> only render if the path is /\n      <Route path=\"/about\" component={About}/>\n      <Route path=\"/shop\" exact component={Shop}/>\n      <Route path=\"/shop/:id\" component={ItemDetails}/>\n      </Switch>\n    </div>\n    </Router>\n  );\n}\n\nconst Home  = () => (\n  <div>\n    <h1>Home Page</h1>\n  </div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}